{"version":3,"sources":["webpack:///webpack/bootstrap fe7642c93f25336ca7ad","webpack:///./src/worker/flood-fill.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","floodFillSteps","floodFillWays","length","getPointOffset","getPointOffsetWidth","toleranceEqual","arrayOne","offset","arrayTwo","tolerance","start","Math","abs","onmessage","oEvent","data","getPointOffsetFn","width","Function","getGetPointOffsetFunction","imageData","point","colour","target","height","key","x","y","x2","y2","points","seen","steps","pop","push","floodFill","parsedColor","postMessage"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAhB,GACA,IAAAS,EAAAT,KAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,IAGAzB,IAAA0B,EAAA,6BC7DA,MAAAC,IAAA,0BACAC,EAAAD,EAAAE,OAEA,IAAAC,EAAA,KACAC,EAAA,KASA,MAmDAC,EAAA,CAAAC,EAAAC,EAAAC,EAAAC,KACA,IAAAP,EAAAM,EAAAN,OACAQ,EAAAH,EAAAL,EAMA,IAJAO,KAAA,EAIAC,KAAAR,KACA,GAAAS,KAAAC,IAAAN,EAAAI,GAAAF,EAAAN,IAAAO,EACA,SAIA,UAaAI,UAAA,CAAAC,IACA,IAAA/B,EAAA+B,EAAAC,KACAC,EAVA,CAAAC,IACAA,IAAAb,IACAA,EAAAa,EACAd,EAAA,IAAAe,SAAA,2BAAAD,EAAA,UAEAd,GAKAgB,CAAApC,EAAAkC,OAhFA,EAAAG,EAAAjB,EAAAkB,EAAAC,EAAAC,EAAAd,EAAAQ,EAAAO,KACA,IAGAC,EACAC,EACAC,EACApB,EACA9B,EACAmD,EACAC,EATAC,GAAAT,GACAU,KACAC,EAAAhC,EAUA,KAAAqB,EAAAS,EAAAG,OAMA,GAHA1B,EAAAJ,EAFAuB,EAAAL,EAAAK,EACAC,EAAAN,EAAAM,GAIAtB,EAAAe,EAAAb,EAAAgB,EAAAd,GAOA,IADAhC,EAAAwB,EACAxB,KAEAA,EAAA,IACA2C,EAAAb,EAAA9B,GAAA6C,EAAA7C,IAMAgD,GAFAG,EAAAF,EAAAM,EAAAvD,GAAA,IAEA,KADAoD,EAAAF,EAAAK,EAAAvD,GAAA,IAKAmD,EAAA,GAAAC,EAAA,GAAAD,GAAAX,GAAAY,GAAAL,GAAAO,EAAAN,KAKAK,EAAAI,MAAyBR,EAAAE,EAAAD,EAAAE,IACzBE,EAAAN,IAAA,IAoCAU,CACApD,EAAAgC,KACAC,GACSU,EAAA3C,EAAA2C,EAAAC,EAAA5C,EAAA4C,GACT5C,EAAAqD,YACArD,EAAAwC,OACAxC,EAAA0B,UACA1B,EAAAkC,MACAlC,EAAAyC,QAEAa,YAAAtD,EAAAgC","file":"fe7642c93f25336ca7ad.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"Ib4x\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fe7642c93f25336ca7ad","const floodFillSteps = [[1, 0], [0, 1], [0, -1], [-1, 0]];\r\nconst floodFillWays = floodFillSteps.length;\r\n\r\nlet getPointOffset = null;\r\nlet getPointOffsetWidth = null;\r\n\r\n// The next two functions are from a flood fill algorithm implementaiton\r\n// from https://bl.ocks.org/jon-hall/2fc30039629ef22bc95c\r\n// \"canvas flood fill implementation and a simple demo app\"\r\n// Adapted for code consistency\r\n// Released under the The MIT License.\r\n\r\n// The actual flood fill implementation\r\nconst floodFill = (imageData, getPointOffset, point, colour, target, tolerance, width, height) => {\r\n    let points = [point],\r\n        seen = {},\r\n        steps = floodFillSteps,\r\n        key,\r\n        x,\r\n        y,\r\n        offset,\r\n        i,\r\n        x2,\r\n        y2;\r\n    \r\n    // Keep going while we have points to walk\r\n    while(!!(point = points.pop())) {\r\n        x = point.x;\r\n        y = point.y;\r\n        offset = getPointOffset(x, y);\r\n        \r\n        // Move to next point if this pixel isn't within tolerance of the colour being filled\r\n        if(!toleranceEqual(imageData, offset, target, tolerance)) {\r\n            continue;\r\n        }\r\n        \r\n        // Update the pixel to the fill colour and add neighbours onto stack to traverse \r\n        // the fill area\r\n        i = floodFillWays;\r\n        while(i--) {\r\n            // Use the same loop for setting RGBA as for checking the neighbouring pixels\r\n            if(i < 4) {\r\n                imageData[offset + i] = colour[i];\r\n            }\r\n        \r\n            // Get the new coordinate by adjusting x and y based on current step\r\n            x2 = x + steps[i][0];\r\n            y2 = y + steps[i][1];\r\n            key = x2 + ',' + y2;\r\n            \r\n            // If new coordinate is out of bounds, or we've already added it, then skip to \r\n            // trying the next neighbour without adding this one\r\n            if(x2 < 0 || y2 < 0 || x2 >= width || y2 >= height || seen[key]) {\r\n                continue;\r\n            }\r\n            \r\n            // Push neighbour onto points array to be processed, and tag as seen\r\n            points.push({ x: x2, y: y2 });\r\n            seen[key] = true;\r\n        }\r\n    }\r\n};\r\n\r\n// Compare subsection of arrayOne's values to arrayTwo's values, with an optional tolerance\r\nconst toleranceEqual = (arrayOne, offset, arrayTwo, tolerance) => {\r\n    let length = arrayTwo.length,\r\n    start = offset + length;\r\n    \r\n    tolerance = tolerance || 0;\r\n    \r\n    // Iterate (in reverse) the items being compared in each array, checking their values are \r\n    // within tolerance of each other\r\n    while(start-- && length--) {\r\n        if(Math.abs(arrayOne[start] - arrayTwo[length]) > tolerance) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n// This is a performance enhancement - removing the width reference and hardcoding it instead \r\n// reduces cycles. We set it here, every time the width of the canvas changes\r\nconst getGetPointOffsetFunction = (width) => {\r\n    if (width !== getPointOffsetWidth) {\r\n        getPointOffsetWidth = width;\r\n        getPointOffset = new Function('x', 'y', 'return 4 * (y * ' + width + ' + x)');\r\n    }\r\n    return getPointOffset;\r\n}\r\n\r\nonmessage = (oEvent) => {\r\n    let d = oEvent.data;\r\n    let getPointOffsetFn = getGetPointOffsetFunction(d.width);\r\n    floodFill(\r\n        d.data, \r\n        getPointOffsetFn,\r\n        { x: d.x, y: d.y },\r\n        d.parsedColor,\r\n        d.target,\r\n        d.tolerance,\r\n        d.width,\r\n        d.height\r\n    );\r\n    postMessage(d.data);\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/worker/flood-fill.worker.js\n// module id = Ib4x\n// module chunks = 0"],"sourceRoot":""}